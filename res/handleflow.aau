//流水处理函数
import base32; //BASE32库

handleFlow = function(param){
	var flow_result = "" //用于存储流水解码结果
	var flow_tidy = string.replace( param.flow_raw,"< , >","|" ) //其实为了性能，应该按不同匹配方法在不同位置替换的，我放这里是为了方便
	var flow_table = string.split( flow_tidy,'\n' )

	//生成行过滤的匹配模板
	var matching_template = ""
	if( #param.filter ){ //指定了匹配值
		select(param.filter_type) {
			case "#操作号" {
				var filter_operation = string.replace(param.filter,",","") //删除逗号用于确认是否纯数字
				if(tonumber(filter_operation) != filter_operation){
					win.msgbox("请输入数字操作号","");
					return null;
				}
				//matching_template = "<" ++ string.replace(param.filter,"< >|<,>",{[" "]="";[","]=">|<"}) ++ ">" //写成下面两行更容易明白
				param.filter = string.replace(param.filter, " ", "") //删除空格
				matching_template = "<" ++ string.replace(param.filter, ",", ">|<") ++ ">"
				matching_template = "\|" ++ matching_template ++ "\|" ++ param.user ++ "\|"
			}
			case "@关键字" {
				//matching_template = "<" ++ string.trim(param.filter) ++ ">" //原本是没打算用「或」匹配关键字的
				param.filter = string.trim( string.format("%q",param.filter),'"' ) //引号加上反斜杠，并删除前后所有双引号
				if ( string.endWith(param.filter,"\") ) { param.filter += '"' } //防止上面那行代码，因为最后的关键字为双引号导致出错
				param.filter = string.replace(param.filter,"<@:@>","\\:") //冒号加上反斜杠
				matching_template = "<" ++ string.replace(param.filter, "\|", ">|<") ++ ">" //流水中不可能含有竖线关键字，因为下文会替换成下划线
			}
			else {
				matching_template = ""
			}
		}
	}
	
	//按行处理，再合并行
	for(flow_pos/*前面这个变量没用*/,flow_line in flow_table){
		var flow_pin = string.split(flow_line,"|")
		var timestamp = tonumber(flow_pin[5]) //上报的时间戳
		var remark = tostring(flow_pin[29]) //备注REMARK

		//解析BASE32备注（先解码可保证"关键字"方式能匹配到准确数据）
		if ( string.startWith(remark,"base32",true) ){
			var b32remark = base32.decode( string.replace(remark,"^<@@base32@>","") ) //删除备注中的base32标记
			b32remark = string.replace( b32remark,"\|","_" ) //替换备注里面的竖线，为『输出指定列』容错
			flow_line = string.replace( flow_line, remark, b32remark ) //用于关键字匹配模板
			flow_pin[29] = string.fromto(b32remark) //备注REMARK
		}
		
		//若过滤模版有值但匹配失败则跳过该行（若过滤模版为空则直接保留该行）
		if( #matching_template and not( string.match(flow_line,matching_template) ) ){
			continue ; //跳过以下处理，不保留该行数据
		} //过了这里则表明过滤模版有值并匹配成功
		
		//解析上报时间戳，若失败则表明不是标准的流水记录行，跳过
		if( timestamp == null ){
			continue ; //跳过以下处理，不保留该行数据
		} //之所以把时间戳判断放到这里，是因为「匹配失败的几率」要比「时间戳错误的几率」大得多，减少判断次数可提高性能
		
		var timestamp_readable = tostring( time(timestamp,"%Y/%m/%d-%H:%M:%S") )
		flow_pin[5] = timestamp_readable //上报的时间戳

		//输出行中的指定列
		var flow_newline = "" //用于存储新的流水行
		if ( #string.trim(param.column) ){
			var column = string.split( param.column,"," )
			for( k,v in column ){
				//flow_newline += ( tostring(flow_pin[tonumber(v)]) ++ '\t' )
				flow_newline += ( string.format("%9s",tostring(flow_pin[tonumber(v)])) ++ ' ' )
			}
		} else {
			for( k,v in flow_pin ){
				flow_newline += ( tostring(v) ++ " " )
			}
		}

		flow_result += ( flow_newline + '\r\n' ) //用于存储所有新的流水行
	}

	//流水列说明
	var column_header = ""
	var field_header = {"版本";"应用ID";"用户IP";"服务器IP";"上报时间【人类可读】";"所在平台";"大区ID";
					"操作类型";"操作ID";"操作用户UID";"操作用户OPENID";"被操作用户UID";"被操作用户OPENID";
					"用户等级";"操作来源";"物品ID";"物品类别";"物品数量";"经验变化";"经验总量";"金币变化";"金币总量";
					"游戏币变化值";"游戏币总量";"在线时长";"登录KEY";"安全KEY校验结果";"反外挂扩展数据";"备注";"在线用户数";
					"预留字段1";"预留字段2";"预留字段3";"预留字段4";"预留字段5";"预留字段6";}

	//添加流水列说明并返回
	if ( #string.trim(param.column) ){
		var keep_column = string.split(param.column,",")
		for( k,v in keep_column ){
			//column_header += ( field_header[tonumber(v)] ++ '\t' )
			column_header += ( string.format("%9s",field_header[tonumber(v)]) ++ ' ' )
		}
	} else {
		for( k,v in field_header ){
			column_header += ( tostring(v) ++ " " )
		}
	}
	
	return (column_header ++ '\r\n' ++ flow_result);
}
